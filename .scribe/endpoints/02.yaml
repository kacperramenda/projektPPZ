name: 'User Management'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: /
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Display the user dashboard.'
      description: |-
        Redirects admin users to the admin users page with an error message.
        Otherwise, renders the user dashboard with the authenticated user's data.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"user": {"id": 1, "name": "John", "surname": "Doe", "email": "john.doe@example.com"}}'
        headers: []
        description: ''
        custom: []
      -
        status: 403
        content: '{"message": "You are not allowed to access this page"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'user/{id}/changePassword'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Change the specified user's password."
      description: |-
        Validates the request data, checks the current password, and updates the password.
        If the user is not found or the current password is incorrect, redirects back with an error message.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user whose password is being changed.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: "The user's current password."
        required: true
        example: oldpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The new password.'
        required: true
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'The password confirmation.'
        required: true
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      current_password: oldpassword123
      password: newpassword123
      password_confirmation: newpassword123
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"message": "Password changed successfully"}'
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: '{"message": "Current password is incorrect"}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'user/{id}/delete'
    metadata:
      groupName: 'User Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: "Delete the specified user's account."
      description: |-
        Finds the user by ID and deletes their account.
        If the user is not found, redirects back with an error message.
        After deletion, redirects to the login page with a success message.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user to delete.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"message": "Account deleted successfully"}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"message": "User not found"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
