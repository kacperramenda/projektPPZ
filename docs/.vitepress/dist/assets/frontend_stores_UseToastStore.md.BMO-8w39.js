import{_ as a,c as i,o as e,ae as t}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"useToastStore Composable","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/stores/UseToastStore.md","filePath":"frontend/stores/UseToastStore.md"}'),n={name:"frontend/stores/UseToastStore.md"};function o(l,s,h,r,p,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="usetoaststore-composable" tabindex="-1">useToastStore Composable <a class="header-anchor" href="#usetoaststore-composable" aria-label="Permalink to &quot;useToastStore Composable&quot;">​</a></h1><p>The <code>useToastStore</code> composable is responsible for managing the state of toast notifications in the application. It provides methods and reactive state to add, remove, and manage toasts.</p><h2 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to &quot;State&quot;">​</a></h2><ul><li><strong><code>toasts</code></strong>: <em>(Array)</em> - A reactive array containing the list of toast objects. Each toast object has the following properties: <ul><li><strong><code>id</code></strong>: <em>(Number)</em> - A unique identifier for the toast.</li><li><strong><code>message</code></strong>: <em>(String)</em> - The message to display in the toast.</li><li><strong><code>type</code></strong>: <em>(String)</em> - The type of the toast (e.g., <code>&#39;error&#39;</code>, <code>&#39;neutral&#39;</code>, <code>&#39;info&#39;</code>, <code>&#39;success&#39;</code>).</li><li><strong><code>duration</code></strong>: <em>(Number)</em> - The duration (in milliseconds) for which the toast is displayed.</li></ul></li></ul><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><ul><li><strong><code>addToast(toast)</code></strong>: Adds a new toast to the list. <ul><li><strong>Parameters</strong>: <ul><li><code>toast</code> <em>(Object)</em>: The toast object to add. Must include <code>id</code>, <code>message</code>, <code>type</code>, and <code>duration</code>.</li></ul></li></ul></li><li><strong><code>removeToast(id)</code></strong>: Removes a toast from the list by its unique identifier. <ul><li><strong>Parameters</strong>: <ul><li><code>id</code> <em>(Number)</em>: The unique identifier of the toast to remove.</li></ul></li></ul></li></ul><h2 id="example-usage" tabindex="-1">Example Usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example Usage&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useToastStore } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/stores/useToastStore&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toasts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addToast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removeToast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useToastStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add a new toast</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addToast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Operation successful!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;success&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Remove a toast</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeToast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,8)]))}const E=a(n,[["render",o]]);export{c as __pageData,E as default};
